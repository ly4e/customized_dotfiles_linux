echo 'Hello from .zshrc'

# ### items needing to be installed and various pre-req commands ###
#   install exa, batcat, bat-extra, fd-find, jq, fzf, peco, and zgenom (from github: git clone https://github.com/jandamm/zgenom.git "${HOME}/.zgenom" )
# ------------
## sim link creation notes (so i don't have to remember) ##
##  ln -s <abs/relative path to real/src file/> <absolute or relative path to the fake, false, target item/> 
#   ln -s ~/.dotfiles/zshrc ~/.zshrc
# ------------

#######################
### History Configurations
########################
# Configuration of the shell's history
HISTSIZE=1000000
SAVEHIST=1000000
HISTFILE=~/.zsh_history
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

## referenced: http://zsh.sourceforge.net/Doc/Release/Options.html  - for history setopts options
#HIST_STAMPS="yyyy-mm-dd"
setopt APPEND_HISTORY            # zsh sessions will append to the history file when they exit verses replacing it
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
#setopt SHARE_HISTORY             # Share history between all sessions.
                                     ##INC_APPEND_HISTORY, INC_APPEND_HISTORY_TIME, & SHARE_HISTORY are mutually exclusive
#setopt INC_APPEND_HISTORY_TIME   # Write to the history file after command completes, the time taken is also written to the history file.  
                                     ##INC_APPEND_HISTORY, INC_APPEND_HISTORY_TIME, & SHARE_HISTORY are mutually exclusive
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits. 
                                     ##INC_APPEND_HISTORY, INC_APPEND_HISTORY_TIME, & SHARE_HISTORY are mutually exclusive
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
unsetopt HIST_BEEP                 # Beep when accessing nonexistent history.
#setopt BANG_HIST                 # Treat the '!' character specially during expansion.

####################
# load zgenom for ZSH plugin management
####################
# based some of the load out below for zgenom based on https://github.com/unixorn/zsh-quickstart-kit

source "${HOME}/.zgenom/zgenom.zsh"
# if the init script doesn't exist
if ! zgenom saved; then
    # specify plugins here
    zgenom oh-my-zsh
    zgenom oh-my-zsh plugins/sudo
#    zgenom oh-my-zsh plugins/git
#    zgenom oh-my-zsh plugins/github
#    zgenom oh-my-zsh plugins/tmux
    zgenom oh-my-zsh plugins/python
#    zgenom oh-my-zsh plugins/vagrant
#    skx/sysadmin-util #- A collection of scripts useful for sysadmins.
##    zgenom load webyneter/docker-aliases # has some better customer aliases ## lastupdated jun 8, 2020
##    zgenom load srijanshetty/docker-zsh #- Adds completions for docker. ## lastupdated aug 2. 2013
#       adds docker machine info to the prompt??? asuran/zsh-docker-machine OR MAYBE sroze/docker-compose-zsh-plugin
#
#    zgenom load stackexchange/blackbox #- Tom Limoncelli's tool for storing secret information in a repository with gnupg encryption,
           ## automatically decrypting as needed. ---> something i want to look into <---
    zgenom load unixorn/fzf-zsh-plugin #- This enables fzf-powered history search.
#    unixorn/jpb.zshplugin #- Some of my standard aliases & functions.
            #^^^ i like the above may want to fork then modify verses just loading the original
            #something else to take inspiration from -> https://github.com/sathish09/zsh_plugins
            #                   -> https://github.com/jhwohlgemuth/zsh-pentest
    zgenom load zsh-autosuggestions #- Adds fish-like autosuggestions to your ZSH sessions.
    zgenom load zsh-users/zsh-completions #- Tab completions for many more applications than come standard with ZSH.
    zgenom load zsh-users/zsh-history-substring-search #- Better history search.
#    zgenom load zsh-users/zsh-syntax-highlighting #- Syntax highlighting as you type.
    zgenom load zdharma/fast-syntax-highlighting #- This plugin provides syntax highlighting for the commands we type in the Terminal. In addition, when we’re typing a command, it’ll be highlighted in red if it’s invalid and in green, if it’s valid.
    zgenom load MichaelAquilina/zsh-you-should-use  #loaded to help remember if or what aliases are already created

    zgenom load unixorn/autoupdate-zgen #- Adds autoupdate (for both zgenom itself, and your plugins) to zgenom

##if [ $(uname -a | grep -ci Darwin) = 1 ]; then
##    # Load macOS-specific plugins
##    zgenom oh-my-zsh plugins/brew
##    zgenom oh-my-zsh plugins/osx
##fi
    # generate the init script from plugins above
    zgenom save
fi

##########################
## Removing unwanted aliases
##########################

#unalias gau # this removes the `git add --update 
unalias l
unalias ll
unalias lsa

##################
# prompt setup part 1 ##
##################
autoload -U colors && colors
setopt PROMPT_SUBST
# ## Creating a fish like collapsed directory listing ##
_fishy_collapsed_wd() {
    local i pwd
        pwd=("${(s:/:)PWD/#$HOME/~}")
    if (($#pwd > 1 )); then
        for i in {1..$(($#pwd-1))}; do
            if [[ "$pwd[$i]" = .* ]]; then
                pwd[$i]="${${pwd[$i]}[1,2]}"
            else
                pwd[$i]="${${pwd[$i]}[1]}"
            fi
        done
    fi
    echo "${(j:/:)pwd}"
}
###########
## Setting up MY feature rich prompt..... part 2
###########
## %L shows the $SHLVL (shell level) to help know how deep within shells one might be
## %n == username
## %m == machine name
## can reference the following for additional options and details ### http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
#   #PROMPT='
#   #%L 🙊🙈🙉 %{$fg_bold[cyan]%}$(_fishy_collapsed_wd)%{$reset_color%} %#>> '
set_prompt() {
    PS1="
%{$fg[green]%}%L 🙊🙈🙉 %{$reset_color%}%{$fg[white]%}[%{$reset_color%}"
#%{$fg[green]%}%L 🙊🙈🙉%{$reset_color%}@%{$fg[cyan]%}%m %{$reset_color%}%{$fg[white]%}[%{$reset_color%}"
# Path: http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
PS1+="%{$fg_bold[cyan]%}$(_fishy_collapsed_wd)%{$reset_color%}"
# Git information in the prompt
if git rev-parse --is-inside-work-tree 2> /dev/null | grep -q 'true' ; then
	PS1+=', '
	PS1+="%{$fg[blue]%}$(git rev-parse --abbrev-ref HEAD 2> /dev/null)%{$reset_color%}"
	if [ $(git status --short | wc -l) -gt 0 ]; then 
		PS1+="%{$fg[red]%}+$(git status --short | wc -l | awk '{$1=$1};1')%{$reset_color%}"
	fi
fi
### removing sudo section due to limiting the time allowed for sudo to be valid.
#### this done by changing the `Defaults env_reset` in the etc\sudoers file to `Defaults env_reset, timestamp_timeout=1`
#### the above changes the timeout to 1 minute verses teh default fo 15 minutes (ref:https://www.howtogeek.com/193811/how-to-change-how-long-sudo-waits-before-it-prompts-you-again/)
#	# Sudo: https://superuser.com/questions/195781/sudo-is-there-a-command-to-check-if-i-have-sudo-and-or-how-much-time-is-left
#	CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
#	if [ ${CAN_I_RUN_SUDO} -gt 0 ]
#	then
#		PROMPT+=', '
#		PROMPT+="%{$fg_bold[red]%}SUDO%{$reset_color%}"
#	fi
	PS1+="%{$fg[white]%}]: %{$reset_color%}"
    PS1+="	
🥳👓>> "
}
#RPROMPT='%*'
precmd_functions+=set_prompt

############
# Command-line tools - Fail-safe command aliases
############
# $AGENT[x] environment variable for use with other commands:
export AGENT1="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
export AGENT2="Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
export AGENT="$AGENT1"
alias curl="curl -A '$AGENT'"
alias wget="wget -U '$AGENT'"
alias nmap="nmap --script-args=\"http.useragent='$AGENT'\""
##additionl example for wpscan
##wpscan --ua "$AGENT" --url 127.0.0.1

# setting environment variables to hold source and destination IPs for use in various efforts
export sIP=127.27.27.27
export tIP=127.111.111.111

# ## Handy Functions ##
function mkcd() {
    mkdir -p "$@" && cd "$_";
}
# from cads@ooyala.com via unixorn
function ff() {
    find . -type f -iname '*'$@'*' -ls
}
# Probe a /24 for hosts
function scan24() {
   nmap -sP ${1}/24
}
function fixgitssh() {
    eval $(ssh-agent -s) ;
    ssh-add ${HOME}/.ssh/id_ly4e_github;
}
function dockershellhere() {
	    dirname=${PWD##*/}
	        docker run --rm -it --entrypoint=/bin/bash -v `pwd`:/${dirname} -w /${dirname} "$@"
}
function dockershellshhere() {
	    dirname=${PWD##*/}
	        docker run --rm -it --entrypoint=/bin/sh -v `pwd`:/${dirname} -w /${dirname} "$@"
}
function smbservehere() {
	    local sharename
	        [[ -z $1 ]] && sharename="SHARE" || sharename=$1
		    docker run --rm -it -p 445:445 -v "${PWD}:/tmp/serve" rflathers/impacket smbserver.py -smb2support $sharename /tmp/serve
}
# scp file to the machine you're sshing into this machine from
function mecp() {
   scp "$@" ${SSH_CLIENT%% *}:~/Downloads/;
}


##################
# Additional  Aliases
##################
 # to use original command if alias overwrites the name use `command <ls>` to invoke the original ls
alias la='exa -halF --group-directories-first --sort extension'
alias ls='exa -hlF --group-directories-first --sort extension'
alias rsrc="source ~/.zshrc"
alias esrc="vim ~/.zshrc"
#Adding a temp command for screenkey version 1.4 where repo only provides v1.2. \
#Version 1.4 allows for quick disabling of showing keys to allow for password typing when needed
alias screenkey="~/Downloads/screenkey-1.4/screenkey"
alias man="batman"
alias grep="batgrep"
alias ":q"="exit"

alias lulz="lolcat"
alias lll="exa -halF | lolcat"
# alias'ing tldr to a docker container verses installing it locally on the system
# will want to make a similar non-priv container
alias tldr='docker run --rm -it -v ~/.tldr/:/root/.tldr/ nutellinoit/tldr'
# Strip color codes from commands that insist on spewing them so we can pipe them into files cleanly.
alias stripcolors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'
alias tflip='echo "(╯°□°)╯︵ ┻━┻"'

##############
# recreating a fish abbreviation expansion functionality
##############
# Adding the code required to add fish like abbreviation expansion declare a list of expandable aliases to fill up later
# https://dev.to/frost/fish-style-abbreviations-in-zsh-40aa
typeset -a ealiases
ealiases=()
# write a function for adding an alias to the list mentioned above
function abbrev-alias() {
	alias $1
	ealiases+=(${1%%\=*})
}
# expand any aliases in the current line buffer
function expand-ealias() {
	if [[ $LBUFFER =~ "\<(${(j:|:)ealiases})\$" ]]; then
		zle _expand_alias
		zle expand-word
	fi
	zle magic-space
}
zle -N expand-ealias
# Bind the space key to the expand-alias function above, so that space will expand any expandable aliases
bindkey ' '        expand-ealias
bindkey '^ '       magic-space     # control-space to bypass completion
bindkey -M isearch " "      magic-space     # normal space during searches
# A function for expanding any aliases before accepting the line as is and executing the entered command
expand-alias-and-accept-line() {
	expand-ealias
	zle .backward-delete-char
	zle .accept-line
}
zle -N accept-line expand-alias-and-accept-line

###############
# Fish-style abbreviations
###############

#Generic system abbreviations
#abbrev-alias ll="ls -hAlp"
#abbrev-alias ld="ls -Ag |grep ' \.'"
abbrev-alias myips="ip -c -brief -4 a"
##abbrev-alias resrc="source ~/.zshrc"
# for the gits :)
abbrev-alias g="git"
abbrev-alias gst="git status"
abbrev-alias gcb="git checkout -b"
abbrev-alias gc="git clone" 
abbrev-alias gp="git push" 
abbrev-alias gcam="git commit -am \""
abbrev-alias gbl="git branch -l" 
abbrev-alias gba="git branch -a" 
# for the tmux's
abbrev-alias t="tmux"
abbrev-alias ta="tmux attach -t"
abbrev-alias tls="tmux ls"
abbrev-alias tn="tmux new -t"
### Docker alias's ###
abbrev-alias di="docker inspect"
abbrev-alias dockershell="docker run --rm -i -t --entrypoint=/bin/bash"
abbrev-alias dockershellsh="docker run --rm -i -t --entrypoint=/bin/sh"
abbrev-alias impacket="docker run --rm -it rflathers/impacket"
abbrev-alias nginxhere='docker run --rm -it -p 80:80 -p 443:443 -v "${PWD}:/srv/data" rflathers/nginxserve'
#abbrev-alias fzf_dot='rg --files --hidden -g "\!.git" | fzf' 

if [ $(uname -a | grep -ci Darwin) = 1 ]; then
    ## brew alias for MacOS
    abbrev-alias bbd="brew bundle dump --force --describe"
fi